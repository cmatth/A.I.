# Casey Matthews# Artifical Intelligence# Homework 1import numpy as npimport NPuzzle as puzimport nqueens as queensimport Searchfrom subprocess import callimport timecall(["clear"])print "Iterative Queens:"puzzle = queens.newBoard(5)start = time.time()answer = Search.GraphSearch(puzzle, queens.solved, queens.getChildren, Search.IterativeDeepening, queens.spaceSize, 20)stop = time.time()print "\nSeconds: %d" %(stop - start)print answer[0]raw_input("\nPress any key: ")call(["clear"])puzzle = puz.newPuzzle(3)print "\nIterative Puzzle:"print "Looks to a depth of 15"start = time.time()answer = Search.GraphSearch(puzzle, puz.solved, puz.children, Search.IterativeDeepening, puz.spaceSize, 20)stop = time.time()print "\nSeconds: %d" %(stop - start)print answer[0]raw_input("\nPress any key: ")call(["clear"])puzzle = puz.newPuzzle(3)goal = puz.goalState()print "\nBiDirectional Puzzle:"start = time.time()answer = Search.GraphSearch(puzzle, puz.solved, puz.children, Search.BiDirectional, puz.spaceSize, goal)stop = time.time()print "\nSeconds: %d" %(stop - start)print answerraw_input("\nPress any key: ")'''call(["clear"])print "DepthFirst Queens:"puzzle = queens.newBoard(6)#print puzzlestart = time.time()answer = Search.GraphSearch(puzzle, queens.solved, queens.getChildren, Search.DepthFirstT, queens.spaceSize, 0)stop = time.time()print "\nSeconds: %d" %(stop - start)print answer[0]raw_input("\nPress any key: ")call(["clear"])print "BreadthFirst Queens:"puzzle = queens.newBoard(4)start = time.time()answer = Search.GraphSearch(puzzle, queens.solved, queens.getChildren, Search.BreadthFirstT, queens.spaceSize, 0)stop = time.time()print "\nSeconds: %d" %(stop - start)print answer[0]raw_input("\nPress any key: ")'''call(["clear"])print "DepthFirst Queens New:"puzzle = queens.new_board(7)#print puzzlestart = time.time()answer = Search.GraphSearch(puzzle, queens.solvedNew, queens.childrens, Search.DepthFirstT, queens.spaceSizeNew, 0)stop = time.time()print "\nSeconds: %f" %(stop - start)print answer[0]raw_input("\nPress Enter: ")print "BreadthFirst Queens New:"puzzle = queens.new_board(7)start = time.time()answer = Search.GraphSearch(puzzle, queens.solvedNew, queens.childrens, Search.BreadthFirstT, queens.spaceSizeNew, 0)stop = time.time()print "\nSeconds: %f" %(stop - start)print answer[0]raw_input("\nPress any key: ")call(["clear"])print "\nSeconds: %d" %(stop - start)goal = answer[0]print goalcall(["clear"])puzzle = queens.newBoard(4)goal = queens.goalState()print goalprint "\nBiDirectional Queens:"start = time.time()answer = Search.GraphSearch(puzzle, queens.solved, queens.getChildrenD, Search.QBiDirectional, queens.spaceSize, goal)stop = time.time()print "\nSeconds: %d" %(stop - start)print	answerraw_input("\nPress any key: ")call(["clear"])puzzle = puz.newPuzzle(3)print "\nDepthFirst Puzzle:"start = time.time()answer = Search.GraphSearch(puzzle, puz.solved, puz.children, Search.DepthFirstT, puz.spaceSize, 0)stop = time.time()print "\nSeconds: %d" %(stop - start)raw_input("\nPress any key: ")call(["clear"])print "BreadthFirst Puzzle:\n"puzzle = puz.newPuzzle(3)start = time.time()answer = Search.GraphSearch(puzzle, puz.solved, puz.children, Search.BreadthFirstT, puz.spaceSize, 0)stop = time.time()print "\nSeconds: %d" %(stop - start)raw_input("\nFinished. Press any key: ")call(["clear"])